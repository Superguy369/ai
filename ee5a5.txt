Implementation of different code optimization techniques(EXP-5)

#include<stdio.h>
#include<conio.h>
#include<string.h>
struct op
{ char l;
char r[20];
}
op[10],pr[10];
void main()
{ int a,i,k,j,n,z=0,m,q;
char *p,*l;
char temp,t;
char *tem;
printf("Enter the Number of Values:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("left: ");
op[i].l=getch();
printf("\tright: ");
scanf("%s",op[i].r);
}
printf("Intermediate Code\n") ;
for(i=0;i<n;i++)
{
printf("%c=",op[i].l);
printf("%s\n",op[i].r);
}
for(i=0;i<n-1;i++)
{ temp=op[i].l;
for(j=0;j<n;j++)
{
p=strchr(op[j].r,temp);
if(p)
{
pr[z].l=op[i].l;
strcpy(pr[z].r,op[i].r);
z++; }}}
pr[z].l=op[n-1].l;
strcpy(pr[z].r,op[n-1].r);
z++;
printf("nAfter Dead Code Eliminationn");
for(k=0;k<z;k++) {
printf("%ct=",pr[k].l);
printf("%sn",pr[k].r);
}
for(m=0;m<z;m++) {
tem=pr[m].r;
for(j=m+1;j<z;j++) {
p=strstr(tem,pr[j].r);
if(p) {
t=pr[j].l;
pr[j].l=pr[m].l;
for(i=0;i<z;i++) {
l=strchr(pr[i].r,t) ;
if(l) {
a=l-pr[i].r;
printf("pos: %d",a);
pr[i].r[a]=pr[m].l; }}}}}
printf("Eliminate Common Expression\n");
for(i=0;i<z;i++)
{
printf("%c\t=",pr[i].l);
printf("%s\n",pr[i].r);
}
for(i=0;i<z;i++)
{
for(j=i+1;j<z;j++)
{
q=strcmp(pr[i].r,pr[j].r);
if((pr[i].l==pr[j].l)&&!q)
{
pr[i].l='\0';
*strcpy(pr[i].r,'\0');
}}}
printf("Optimized Code\n");
for(i=0;i<z;i++)
{ if(pr[i].l!='\0')
{
printf("%c=",pr[i].l);
printf("%s\n",pr[i].r);
}
}
getch();
}

TWO PASS ASSEMBLER(exp-1):-

#include<stdio.h>
#include<string.h>
#include<conio.h>
void main()
{
char *code[9][4] = {
{"PRG1","START","",""},
{"","USING","*","15"},
{"","L","",""},
{"","A","",""},
{"","ST","",""},
{"FOUR","DC","F",""},
{"FIVE","DC","F",""},
{"TEMP","DS","1F",""},
{"","END","",""}
};
char av[2],avail[15] = {'N','N','N','N','N','N','N','N','N','N','N','N','N','N','N'};
int i,j,k,count[3],lc[9]={0,0,0,0,0,0,0,0,0},loc=0;
printf("----------------------------------------------------\n");
printf("LABEL\t\tOPCODE\n");
printf("----------------------------------------------------\n\n");
for(i=0;i<=8;i++)
{
for(j=0;j<=3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
getch();
printf("\n VALUES FOR LC :\n\n");
for(j=0;j<=8;j++)
{
if((strcmp(code[j][1],"START")!=0)&&(strcmp(code[j][1],"USING")!=0)&&(strcmp(code[j]
[1],"L")!=0))
lc[j] = lc[j-1]+4;
printf("%d\t",lc[j]);
}
printf("\n\nSYMBOL TABLEE:\n----------------------------------------------------\n");
printf("SYMBOL\t\tVALUE\t\tLENGTH\t\tR/A");
printf("\n----------------------------------------------------\n");
for(i=0;i< 9;i++) 
{
if(strcmp(code[i][1],"START")==0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
}
else if(strcmp(code[i][0],"")!=0)
{
printf("%s\t\t%d\t\t%d\t\t%c\n",code[i][0],loc,4,'R');
loc=4+loc;
}
else if(strcmp(code[i][1],"USING")==0){}
else
{loc=4+loc;}
}
printf("----------------------------------------------------");
printf("\n\nBASE TABLE:\n-------------------------------------------------------\n");
printf("REG NO\t\tAVAILIBILITY\tCONTENTS OF BASE TABLE");
printf("\n-------------------------------------------------------\n");
for(j=0;j<=8;j++)
{
if(strcmp(code[j][1],"USING")!=0)
{}
else
{
strcpy(av,code[j][3]);
}
}
count[0]=(int)av[0]-48;
count[1]=(int)av[1]-48;
count[2]=count[0]*10+count[1];
avail[count[2]-1]='Y';
for(k=0;k< 16;k++)
{
printf(" %d\t\t %c\n",k,avail[k-1]);
}
printf("-------------------------------------------------------\n");
printf("Continue..??");
getchar();
printf("PASS2 TABLE:\n\n");
printf("LABEL\t\tOP1\t\tLC\t\t");
printf("\n----------------------------------------------------\n");
loc=0;
for(i=0;i<=8;i++)
{
for(j=0;j<=3;j++)
{
printf("%s\t\t",code[i][j]);
}
j=0;
printf("\n");
}
printf("-----------------------------------------------------");
getch();
}

lex(Exp-7) :-

%{
 #include<stdio.h>
%}
LETTER[a-z][A-Z]
DIGIT[0-9]
%%
begin { printf("Recognized Keyword: %s\n", yytext);}
if {printf("Recognised Keyword: %s\n", yytext);}
{LETTER}({LETTER}|{DIGIT})* {printf("Recognized ID: %s\n",yytext);}
%%
main()
{
yylex();
}

Commands:
$lex test1.l 
$cc lex.yy.c –ll 

yacc:-
%token NUM 
% start S 
%% 
S:E{printf(“The value of the expression is %d\n”,$1);} 
; 
E:E’+’T($$=$1+$3} 
; 
E:T {$$=$1;} 
; 
T:T’*’F{$$=$1*$3} 
; 
T:F {$$=$1;} 
; 
F:NUM {$$=$1} 
; 
%% 


OPERATOR PRECEDENCE PARSER (exp 4) :-

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
char *input;
int i=0;
char lasthandle[6],stack[50],handles[][5]={")E(","E*E","E+E","i","E^E"};
//(E) becomes )E( when pushed to stack 
int top=0,l;
char prec[9][9]={
 /*input*/
 /*stack + - * / ^ i ( ) $ */
 /* + */ '>', '>','<','<','<','<','<','>','>',
 /* - */ '>', '>','<','<','<','<','<','>','>',
 /* * */ '>', '>','>','>','<','<','<','>','>',
 /* / */ '>', '>','>','>','<','<','<','>','>',
 /* ^ */ '>', '>','>','>','<','<','<','>','>',
 /* i */ '>', '>','>','>','>','e','e','>','>',
 /* ( */ '<', '<','<','<','<','<','<','>','e',
 /* ) */ '>', '>','>','>','>','e','e','>','>',
 /* $ */ '<', '<','<','<','<','<','<','<','>',
 };
int getindex(char c)
{
switch(c) 
{
 case '+':return 0;
 case '-':return 1;
 case '*':return 2;
 case '/':return 3;
 case '^':return 4;
 case 'i':return 5;
 case '(':return 6;
 case ')':return 7;
 case '$':return 8;
 }
}
int shift()
{
stack[++top]=*(input+i++);
stack[top+1]='\0';
}
int reduce()
{
int i,len,found,t;
for(i=0;i<5;i++)//selecting handles
 {
 len=strlen(handles[i]);
 if(stack[top]==handles[i][0]&&top+1>=len)
 {
 found=1;
 for(t=0;t<len;t++)
 {
 if(stack[top-t]!=handles[i][t])
 {
 found=0; 
break;
 }
 }
 if(found==1)
 {
 stack[top-t+1]='E';
 top=top-t+1;
 strcpy(lasthandle,handles[i]);
 stack[top+1]='\0';
 return 1;//successful reduction
 }
 }
 }
return 0;
}
void dispstack()
{
int j;
for(j=0;j<=top;j++)
 printf("%c",stack[j]);
}
void dispinput()
{
int j;
for(j=i;j<l;j++)
 printf("%c",*(input+j));}
void main()
{
int j;
input=(char*)malloc(50*sizeof(char));
printf("\nEnter the string\n"); 
scanf("%s",input);
input=strcat(input,"$");
l=strlen(input);
strcpy(stack,"$");
printf("\nSTACK\tINPUT\tACTION");
while(i<=l) {
 shift();
 printf("\n");
 dispstack();
 printf("\t");
 dispinput();
 printf("\tShift");
 if(prec[getindex(stack[top])][getindex(input[i])]=='>') {
 while(reduce())
 {
 printf("\n");
 dispstack();
 printf("\t");
 dispinput();
 printf("\tReduced: E->%s",lasthandle);
 }}}
if(strcmp(stack,"$E$")==0)
 printf("\nAccepted;");
else printf("\nNot Accepted;");}

TW0 PASS MACROPROCESSOR(EXP 2):-
main.c:
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
struct deftab
{
    char lab[10];
    char opc[10];
    char oper[10];
} 
d[10];
void main()
{
    char label[10], opcode[10], operand[10], newlabel[10], newoperand[10];
    char macroname[10];
    int i, lines = 0;
    FILE *f1, *f2, *f3;
    f1 = fopen("MACIN.DAT", "r");
    f2 = fopen("MACOUT.DAT", "w");
    f3 = fopen("DEFTAB.DAT", "w");
    fscanf(f1, "%s%s%s", label, opcode, operand);
    fprintf(f2, "%s\t%s\t%s\n", label, opcode, operand);
    while (strcmp(opcode, "END") != 0)
    {
        fscanf(f1, "%s%s%s", label, opcode, operand);
        if (strcmp(opcode, "MACRO") == 0)
        {
            strcpy(macroname, label);
            fprintf(f2, "%s %s %s\n", label, opcode, operand);
            while (strcmp(opcode, "MEND") != 0)
            {
                if (strcmp(label, macroname) != 0)
                {
                    fprintf(f3, "%s\t%s\t%s\n", label, opcode, operand);
                    fprintf(f2, "%s %s %s\n", label, opcode, operand);
                    strcpy(d[lines].lab, label);
                    strcpy(d[lines].opc, opcode);
                    strcpy(d[lines].oper, operand);
                    fscanf(f1, "%s%s%s", label, opcode, operand);
                    lines++;
                }
                else
                {
                    fscanf(f1, "%s%s%s", label, opcode, operand);
                }
            }
            fprintf(f2, "%s %s %s\n", label, opcode, operand);
        }
        else if (strcmp(opcode, macroname) == 0)
        {
            printf("Lines=%d\n", lines);
            for (i = 0; i < 3; i++)
            {   
                fprintf(f2, "%s\t%s\t%s\n", d[i].lab, d[i].opc, d[i].oper);
                printf("DLAB=%s\nDOPC=%s\nDOPER=%s\n", d[i].lab, d[i].opc,
                d[i].oper);
            }
        }
        else
        {
            fprintf(f2, "%s %s %s\n", label, opcode, operand);
        }
    }
    fclose(f1);
    fclose(f2);
    fclose(f3);
    printf("FINISHED");
}
MACIN.DAT:
CALC START 1000
SUM MACRO **
** LDA #5
** ADD #10
** STA 2000
** MEND **
** LDA LENGTH
** COMP ZERO
** JEQ LOOP
** SUM **
LENGTH WORD 5
ZERO WORD 0
LOOP SUM **
** END **

MACOUT.DAT
CALC START 1000
** LDA LENGTH
**COMP ZERO
** LEQ LOOP
** LDA #5
** ADD #10
** STA 2000
**END**

DEFTAB.DAT 
** LDA #5
**ADD #10
**STA 2000


CODE GENERATION(EXP 6):-
#include<stdio.h>
#include<string.h>
char op[2],arg1[5],arg2[5],result[5];
void main()
{
  FILE *fp1,*fp2;
  fp1=fopen("input.txt","r");
  fp2=fopen("output.txt","w");
  while(!feof(fp1))
  {

    fscanf(fp1,"%s%s%s%s",op,arg1,arg2,result);
    if(strcmp(op,"+")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nADD R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    if(strcmp(op,"*")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nMUL R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    if(strcmp(op,"-")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nSUB R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    if(strcmp(op,"/")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nDIV R0,%s",arg2);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    if(strcmp(op,"=")==0)
    {
      fprintf(fp2,"\nMOV R0,%s",arg1);
      fprintf(fp2,"\nMOV %s,R0",result);
    }
    }
    fclose(fp1);
    fclose(fp2);
   
  }
  
input.txt:
 + a b t1
 * c d t2
 - t1 t2 t
 = t ? x
 
LEXICAL ANALYSER(EXP 3):- 
main.c:
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
int isKeyword(char buffer[])
{
    char keywords[32][10] = {"auto","break","case","char","const","continue","default",
    "do","double","else","enum","extern","float","for","goto",
    "if","int","long","register","return","short","signed",
    "sizeof","static","struct","switch","typedef","union",
    "unsigned","void","volatile","while"};
    int i, flag = 0;
    for(i = 0; i < 32; ++i)
    {
        if(strcmp(keywords[i], buffer) == 0)
        {
            flag = 1;
            break;
        }
    }
    return flag;
}
int main()
{
    char ch, buffer[15], operators[] = "+-*/%=";
    FILE *fp;
    int i,j=0;
    fp = fopen("file.txt","r");
    if(fp == NULL)
    {
        printf("error while opening the file\n");
        exit(0);
    }
    while((ch = fgetc(fp)) != EOF)
    {
        for(i = 0; i < 6; ++i)
        {
            if(ch == operators[i])
            printf("%c is operator\n", ch);
        }
        if(isalnum(ch))
        {
            buffer[j++] = ch;
        }
        else if((ch == ' ' || ch == '\n') && (j != 0))
        {
            buffer[j] = '\0';
            j = 0;
            if(isKeyword(buffer) == 1)
            printf("%s is keyword\n", buffer);
            else
            printf("%s is indentifier\n", buffer);
        }
    }
    fclose(fp);
    return 0;
}

file.txt:
#include<stdio.h>
int main()
{
int A,B, sum=0;
printf("Enter two numbers A and B:\n");
scanf("%d%d", &A,&B);
sum = A+B;
printf("Sum of A and B is: %d",sum);
return 0;
}